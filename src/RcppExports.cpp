// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Correlationc
arma::mat Correlationc(const arma::mat& coordsx, const arma::mat& coordsy, const arma::vec& theta, bool ps, bool same);
RcppExport SEXP _gramar_Correlationc(SEXP coordsxSEXP, SEXP coordsySEXP, SEXP thetaSEXP, SEXP psSEXP, SEXP sameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coordsx(coordsxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coordsy(coordsySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type ps(psSEXP);
    Rcpp::traits::input_parameter< bool >::type same(sameSEXP);
    rcpp_result_gen = Rcpp::wrap(Correlationc(coordsx, coordsy, theta, ps, same));
    return rcpp_result_gen;
END_RCPP
}
// gpkernel
arma::mat gpkernel(const arma::mat& coordsx, const arma::vec& theta);
RcppExport SEXP _gramar_gpkernel(SEXP coordsxSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coordsx(coordsxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(gpkernel(coordsx, theta));
    return rcpp_result_gen;
END_RCPP
}
// mgp_precision
Rcpp::List mgp_precision(const arma::mat& coords, const arma::mat& xcoords_in, const arma::field<arma::vec>& axis_partition, const arma::mat& theta, const arma::vec& tausq, int num_threads, bool use_cache, bool verbose, bool debug);
RcppExport SEXP _gramar_mgp_precision(SEXP coordsSEXP, SEXP xcoords_inSEXP, SEXP axis_partitionSEXP, SEXP thetaSEXP, SEXP tausqSEXP, SEXP num_threadsSEXP, SEXP use_cacheSEXP, SEXP verboseSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xcoords_in(xcoords_inSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type axis_partition(axis_partitionSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_cache(use_cacheSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(mgp_precision(coords, xcoords_in, axis_partition, theta, tausq, num_threads, use_cache, verbose, debug));
    return rcpp_result_gen;
END_RCPP
}
// gramar_mcmc_collapsed
Rcpp::List gramar_mcmc_collapsed(const arma::mat& y, const arma::mat& X, const arma::mat& coords, const arma::field<arma::vec>& axis_partition, const arma::mat& set_unif_bounds_in, const arma::mat& beta_Vi, const arma::vec& sigmasq_ab, const arma::vec& tausq_ab, const arma::mat& theta, const arma::mat& beta, const arma::vec& tausq, const arma::mat& mcmcsd, int mcmc_keep, int mcmc_burn, int mcmc_thin, int mcmc_startfrom, int num_threads, bool adapting, bool verbose, bool debug, int print_every, bool sample_beta, bool sample_theta);
RcppExport SEXP _gramar_gramar_mcmc_collapsed(SEXP ySEXP, SEXP XSEXP, SEXP coordsSEXP, SEXP axis_partitionSEXP, SEXP set_unif_bounds_inSEXP, SEXP beta_ViSEXP, SEXP sigmasq_abSEXP, SEXP tausq_abSEXP, SEXP thetaSEXP, SEXP betaSEXP, SEXP tausqSEXP, SEXP mcmcsdSEXP, SEXP mcmc_keepSEXP, SEXP mcmc_burnSEXP, SEXP mcmc_thinSEXP, SEXP mcmc_startfromSEXP, SEXP num_threadsSEXP, SEXP adaptingSEXP, SEXP verboseSEXP, SEXP debugSEXP, SEXP print_everySEXP, SEXP sample_betaSEXP, SEXP sample_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type axis_partition(axis_partitionSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type set_unif_bounds_in(set_unif_bounds_inSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_Vi(beta_ViSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmasq_ab(sigmasq_abSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tausq_ab(tausq_abSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mcmcsd(mcmcsdSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_keep(mcmc_keepSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_burn(mcmc_burnSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_thin(mcmc_thinSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_startfrom(mcmc_startfromSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type adapting(adaptingSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< int >::type print_every(print_everySEXP);
    Rcpp::traits::input_parameter< bool >::type sample_beta(sample_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_theta(sample_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(gramar_mcmc_collapsed(y, X, coords, axis_partition, set_unif_bounds_in, beta_Vi, sigmasq_ab, tausq_ab, theta, beta, tausq, mcmcsd, mcmc_keep, mcmc_burn, mcmc_thin, mcmc_startfrom, num_threads, adapting, verbose, debug, print_every, sample_beta, sample_theta));
    return rcpp_result_gen;
END_RCPP
}
// gramar_wpredict
Rcpp::List gramar_wpredict(const arma::mat& Xin, const arma::mat& coordsin, const arma::field<arma::uvec>& indexingin, const arma::mat& Xout, const arma::mat& coordsout, const arma::field<arma::vec>& axis_partition, const arma::mat& w_mcmc, const arma::mat& theta_mcmc, bool verbose, bool debug);
RcppExport SEXP _gramar_gramar_wpredict(SEXP XinSEXP, SEXP coordsinSEXP, SEXP indexinginSEXP, SEXP XoutSEXP, SEXP coordsoutSEXP, SEXP axis_partitionSEXP, SEXP w_mcmcSEXP, SEXP theta_mcmcSEXP, SEXP verboseSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coordsin(coordsinSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type indexingin(indexinginSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xout(XoutSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coordsout(coordsoutSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type axis_partition(axis_partitionSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w_mcmc(w_mcmcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta_mcmc(theta_mcmcSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(gramar_wpredict(Xin, coordsin, indexingin, Xout, coordsout, axis_partition, w_mcmc, theta_mcmc, verbose, debug));
    return rcpp_result_gen;
END_RCPP
}
// gramar_wpredict_via_prec
Rcpp::List gramar_wpredict_via_prec(const arma::mat& Xin, const arma::mat& coordsin, const arma::field<arma::uvec>& indexingin, const arma::mat& Xout, const arma::mat& coordsout, const arma::field<arma::vec>& axis_partition, const arma::mat& w_mcmc, const arma::mat& theta_mcmc, bool verbose, bool debug);
RcppExport SEXP _gramar_gramar_wpredict_via_prec(SEXP XinSEXP, SEXP coordsinSEXP, SEXP indexinginSEXP, SEXP XoutSEXP, SEXP coordsoutSEXP, SEXP axis_partitionSEXP, SEXP w_mcmcSEXP, SEXP theta_mcmcSEXP, SEXP verboseSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xin(XinSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coordsin(coordsinSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type indexingin(indexinginSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xout(XoutSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coordsout(coordsoutSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type axis_partition(axis_partitionSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w_mcmc(w_mcmcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta_mcmc(theta_mcmcSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(gramar_wpredict_via_prec(Xin, coordsin, indexingin, Xout, coordsout, axis_partition, w_mcmc, theta_mcmc, verbose, debug));
    return rcpp_result_gen;
END_RCPP
}
// Cov_matern
arma::mat Cov_matern(const arma::mat& x, const arma::mat& y, const double& sigmasq, const double& phi, const double& nu, const double& tausq, bool same, int nThreads);
RcppExport SEXP _gramar_Cov_matern(SEXP xSEXP, SEXP ySEXP, SEXP sigmasqSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP tausqSEXP, SEXP sameSEXP, SEXP nThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< bool >::type same(sameSEXP);
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cov_matern(x, y, sigmasq, phi, nu, tausq, same, nThreads));
    return rcpp_result_gen;
END_RCPP
}
// Cov_matern2
arma::mat Cov_matern2(const arma::mat& x, const arma::mat& y, const double& phi, bool same, int twonu);
RcppExport SEXP _gramar_Cov_matern2(SEXP xSEXP, SEXP ySEXP, SEXP phiSEXP, SEXP sameSEXP, SEXP twonuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type same(sameSEXP);
    Rcpp::traits::input_parameter< int >::type twonu(twonuSEXP);
    rcpp_result_gen = Rcpp::wrap(Cov_matern2(x, y, phi, same, twonu));
    return rcpp_result_gen;
END_RCPP
}
// Cov_matern_h
double Cov_matern_h(const double& h, const double& sigmasq, const double& phi, const double& nu, const double& tausq);
RcppExport SEXP _gramar_Cov_matern_h(SEXP hSEXP, SEXP sigmasqSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP tausqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type tausq(tausqSEXP);
    rcpp_result_gen = Rcpp::wrap(Cov_matern_h(h, sigmasq, phi, nu, tausq));
    return rcpp_result_gen;
END_RCPP
}
// Cov_powexp_h
double Cov_powexp_h(const double& h, const double& sigmasq, const double& phi, const double& nu, const double& tausq);
RcppExport SEXP _gramar_Cov_powexp_h(SEXP hSEXP, SEXP sigmasqSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP tausqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmasq(sigmasqSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double& >::type tausq(tausqSEXP);
    rcpp_result_gen = Rcpp::wrap(Cov_powexp_h(h, sigmasq, phi, nu, tausq));
    return rcpp_result_gen;
END_RCPP
}
// gneiting2002_h
double gneiting2002_h(const double& h, const double& u, const double& a, const double& c, const double& beta);
RcppExport SEXP _gramar_gneiting2002_h(SEXP hSEXP, SEXP uSEXP, SEXP aSEXP, SEXP cSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(gneiting2002_h(h, u, a, c, beta));
    return rcpp_result_gen;
END_RCPP
}
// kernp_xx
arma::mat kernp_xx(const arma::mat& Xcoords, const arma::vec& kweights);
RcppExport SEXP _gramar_kernp_xx(SEXP XcoordsSEXP, SEXP kweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xcoords(XcoordsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kweights(kweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(kernp_xx(Xcoords, kweights));
    return rcpp_result_gen;
END_RCPP
}
// kernp_xy
arma::mat kernp_xy(const arma::mat& Xcoords, const arma::mat& Ycoords, const arma::vec& kweights);
RcppExport SEXP _gramar_kernp_xy(SEXP XcoordsSEXP, SEXP YcoordsSEXP, SEXP kweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xcoords(XcoordsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ycoords(YcoordsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kweights(kweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(kernp_xy(Xcoords, Ycoords, kweights));
    return rcpp_result_gen;
END_RCPP
}
// kthresholdscp
arma::vec kthresholdscp(arma::vec x, unsigned int k);
RcppExport SEXP _gramar_kthresholdscp(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kthresholdscp(x, k));
    return rcpp_result_gen;
END_RCPP
}
// uturbocolthreshold
arma::uvec uturbocolthreshold(const arma::vec& col1, const arma::vec& thresholds);
RcppExport SEXP _gramar_uturbocolthreshold(SEXP col1SEXP, SEXP thresholdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type col1(col1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thresholds(thresholdsSEXP);
    rcpp_result_gen = Rcpp::wrap(uturbocolthreshold(col1, thresholds));
    return rcpp_result_gen;
END_RCPP
}
// split_ap
arma::field<arma::uvec> split_ap(arma::uvec& membership, const arma::mat& coords, const arma::field<arma::vec>& thresholds);
RcppExport SEXP _gramar_split_ap(SEXP membershipSEXP, SEXP coordsSEXP, SEXP thresholdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type membership(membershipSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type thresholds(thresholdsSEXP);
    rcpp_result_gen = Rcpp::wrap(split_ap(membership, coords, thresholds));
    return rcpp_result_gen;
END_RCPP
}
// cube_tcrossprod
arma::cube cube_tcrossprod(const arma::cube& x);
RcppExport SEXP _gramar_cube_tcrossprod(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cube_tcrossprod(x));
    return rcpp_result_gen;
END_RCPP
}
// summary_list_mean
arma::mat summary_list_mean(const arma::field<arma::mat>& x, int n_threads);
RcppExport SEXP _gramar_summary_list_mean(SEXP xSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(summary_list_mean(x, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// summary_list_q
arma::mat summary_list_q(const arma::field<arma::mat>& x, double q, int n_threads);
RcppExport SEXP _gramar_summary_list_q(SEXP xSEXP, SEXP qSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(summary_list_q(x, q, n_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gramar_Correlationc", (DL_FUNC) &_gramar_Correlationc, 5},
    {"_gramar_gpkernel", (DL_FUNC) &_gramar_gpkernel, 2},
    {"_gramar_mgp_precision", (DL_FUNC) &_gramar_mgp_precision, 9},
    {"_gramar_gramar_mcmc_collapsed", (DL_FUNC) &_gramar_gramar_mcmc_collapsed, 23},
    {"_gramar_gramar_wpredict", (DL_FUNC) &_gramar_gramar_wpredict, 10},
    {"_gramar_gramar_wpredict_via_prec", (DL_FUNC) &_gramar_gramar_wpredict_via_prec, 10},
    {"_gramar_Cov_matern", (DL_FUNC) &_gramar_Cov_matern, 8},
    {"_gramar_Cov_matern2", (DL_FUNC) &_gramar_Cov_matern2, 5},
    {"_gramar_Cov_matern_h", (DL_FUNC) &_gramar_Cov_matern_h, 5},
    {"_gramar_Cov_powexp_h", (DL_FUNC) &_gramar_Cov_powexp_h, 5},
    {"_gramar_gneiting2002_h", (DL_FUNC) &_gramar_gneiting2002_h, 5},
    {"_gramar_kernp_xx", (DL_FUNC) &_gramar_kernp_xx, 2},
    {"_gramar_kernp_xy", (DL_FUNC) &_gramar_kernp_xy, 3},
    {"_gramar_kthresholdscp", (DL_FUNC) &_gramar_kthresholdscp, 2},
    {"_gramar_uturbocolthreshold", (DL_FUNC) &_gramar_uturbocolthreshold, 2},
    {"_gramar_split_ap", (DL_FUNC) &_gramar_split_ap, 3},
    {"_gramar_cube_tcrossprod", (DL_FUNC) &_gramar_cube_tcrossprod, 1},
    {"_gramar_summary_list_mean", (DL_FUNC) &_gramar_summary_list_mean, 2},
    {"_gramar_summary_list_q", (DL_FUNC) &_gramar_summary_list_q, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gramar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
